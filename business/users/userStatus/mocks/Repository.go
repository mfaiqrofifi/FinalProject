// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	userStatus "social_media/business/users/userStatus"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateStatus provides a mock function with given fields: ctx, status, IdUser
func (_m *Repository) CreateStatus(ctx context.Context, status string, IdUser int) (userStatus.UserStatus, error) {
	ret := _m.Called(ctx, status, IdUser)

	var r0 userStatus.UserStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, int) userStatus.UserStatus); ok {
		r0 = rf(ctx, status, IdUser)
	} else {
		r0 = ret.Get(0).(userStatus.UserStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, status, IdUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SeeComment provides a mock function with given fields: ctx, Idstatus
func (_m *Repository) SeeComment(ctx context.Context, Idstatus int) ([]userStatus.UserStatus, error) {
	ret := _m.Called(ctx, Idstatus)

	var r0 []userStatus.UserStatus
	if rf, ok := ret.Get(0).(func(context.Context, int) []userStatus.UserStatus); ok {
		r0 = rf(ctx, Idstatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userStatus.UserStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, Idstatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
