// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	userRegister "social_media/business/users/userRegister"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeteilRegister provides a mock function with given fields: ctx, IdUser
func (_m *Repository) DeteilRegister(ctx context.Context, IdUser int) ([]userRegister.DomainRegister, error) {
	ret := _m.Called(ctx, IdUser)

	var r0 []userRegister.DomainRegister
	if rf, ok := ret.Get(0).(func(context.Context, int) []userRegister.DomainRegister); ok {
		r0 = rf(ctx, IdUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userRegister.DomainRegister)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, IdUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriend provides a mock function with given fields: ctx, nama
func (_m *Repository) GetFriend(ctx context.Context, nama string) ([]userRegister.DomainRegister, error) {
	ret := _m.Called(ctx, nama)

	var r0 []userRegister.DomainRegister
	if rf, ok := ret.Get(0).(func(context.Context, string) []userRegister.DomainRegister); ok {
		r0 = rf(ctx, nama)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userRegister.DomainRegister)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nama)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *Repository) Login(ctx context.Context, email string, password string) (userRegister.DomainRegister, error) {
	ret := _m.Called(ctx, email, password)

	var r0 userRegister.DomainRegister
	if rf, ok := ret.Get(0).(func(context.Context, string, string) userRegister.DomainRegister); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(userRegister.DomainRegister)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, name, email, address, password
func (_m *Repository) Register(ctx context.Context, name string, email string, address string, password string) (userRegister.DomainRegister, error) {
	ret := _m.Called(ctx, name, email, address, password)

	var r0 userRegister.DomainRegister
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) userRegister.DomainRegister); ok {
		r0 = rf(ctx, name, email, address, password)
	} else {
		r0 = ret.Get(0).(userRegister.DomainRegister)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, email, address, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
